version: '3.8'

# ARM64 configuration for macOS 15
# Usage: ROS_VERSION=ros1 COMMAND="roslaunch fcu_core fcu_core.launch" docker-compose -f docker-compose.arm64.yml up
# Or: ROS_VERSION=ros2 COMMAND="ros2 launch fcu_core fcu_core.launch" docker-compose -f docker-compose.arm64.yml up

services:
  ros-dev:
    build:
      context: .
      dockerfile: Dockerfile.${ROS_VERSION:-ros1}.arm64
    platform: linux/arm64
    container_name: ros_${ROS_VERSION:-ros1}_dev_arm64
    volumes:
      # Mount current directory to /workspace in container
      - .:/workspace
      # Mount ROS workspace based on version
      - ./${ROS_WORKSPACE:-ros1_workspace}:/workspace/${ROS_WORKSPACE:-ros1_workspace}
      # Mount ROS logs to workspace for host access
      - ./${ROS_WORKSPACE:-ros1_workspace}/ros_logs:/root/.ros/log
      # X11 forwarding for GUI applications (macOS)
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    environment:
      - DISPLAY=host.docker.internal:0
      - ROS_VERSION=${ROS_VERSION:-ros1}
      - ROS_WORKSPACE=${ROS_WORKSPACE:-ros1_workspace}
      - ROS_DISTRO=${ROS_DISTRO:-noetic}
      - DISABLE_ROS1_EOL_WARNINGS=1
      # macOS specific environment variables
      - LIBGL_ALWAYS_SOFTWARE=1
      - QT_X11_NO_MITSHM=1
      - XDG_RUNTIME_DIR=/tmp/runtime-root
    network_mode: host
    privileged: true
    stdin_open: true
    tty: true
    # Override command if specified
    command: ${COMMAND:-/bin/bash}

  fcu-core:
    build:
      context: .
      dockerfile: Dockerfile.${ROS_VERSION:-ros1}.arm64
    platform: linux/arm64
    container_name: fcu_core_${ROS_VERSION:-ros1}_arm64
    volumes:
      - .:/workspace
      - ./${ROS_WORKSPACE:-ros1_workspace}:/workspace/${ROS_WORKSPACE:-ros1_workspace}
      # Mount ROS logs to workspace for host access
      - ./${ROS_WORKSPACE:-ros1_workspace}/ros_logs:/root/.ros/log
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    environment:
      - DISPLAY=host.docker.internal:0
      - ROS_VERSION=${ROS_VERSION:-ros1}
      - ROS_WORKSPACE=${ROS_WORKSPACE:-ros1_workspace}
      - ROS_DISTRO=${ROS_DISTRO:-noetic}
      - DISABLE_ROS1_EOL_WARNINGS=1
      # macOS specific environment variables
      - LIBGL_ALWAYS_SOFTWARE=1
      - QT_X11_NO_MITSHM=1
      - XDG_RUNTIME_DIR=/tmp/runtime-root
    network_mode: host
    privileged: true
    depends_on:
      - ros-dev
    command: >
      bash -c "
        sleep 5 &&
        cd /workspace/${ROS_WORKSPACE:-ros1_workspace} &&
        source /opt/ros/${ROS_DISTRO:-noetic}/setup.bash &&
        echo 'Building workspace...' &&
        catkin_make &&
        source devel/setup.bash &&
        echo 'Starting FCU core...' &&
        if [ '${ROS_VERSION:-ros1}' = 'ros1' ]; then
          roslaunch fcu_core fcu_core_server.launch rviz:=false
        else
          echo 'ROS2 version not available yet'
          sleep infinity
        fi
      "

  rviz:
    build:
      context: .
      dockerfile: Dockerfile.${ROS_VERSION:-ros1}.arm64
    platform: linux/arm64
    container_name: rviz_${ROS_VERSION:-ros1}_arm64
    volumes:
      - .:/workspace
      - ./${ROS_WORKSPACE:-ros1_workspace}:/workspace/${ROS_WORKSPACE:-ros1_workspace}
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    environment:
      - DISPLAY=host.docker.internal:0
      - ROS_VERSION=${ROS_VERSION:-ros1}
      - ROS_WORKSPACE=${ROS_WORKSPACE:-ros1_workspace}
      - ROS_DISTRO=${ROS_DISTRO:-noetic}
      - DISABLE_ROS1_EOL_WARNINGS=1
      # macOS specific environment variables for GUI
      - LIBGL_ALWAYS_SOFTWARE=1
      - QT_X11_NO_MITSHM=1
      - XDG_RUNTIME_DIR=/tmp/runtime-root
      - QT_QPA_PLATFORM=xcb
      - QT_DEBUG_PLUGINS=1
      # OpenGL software rendering for macOS
      - MESA_GL_VERSION_OVERRIDE=3.3
      - MESA_GLSL_VERSION_OVERRIDE=330
      - __GL_THREADED_OPTIMIZATIONS=0
    network_mode: host
    privileged: true
    depends_on:
      - fcu-core
    command: >
      bash -c "
        sleep 15 &&
        mkdir -p /tmp/runtime-root &&
        chmod 700 /tmp/runtime-root &&
        cd /workspace/${ROS_WORKSPACE:-ros1_workspace} &&
        source /opt/ros/${ROS_DISTRO:-noetic}/setup.bash &&
        echo 'Waiting for workspace build...' &&
        while [ ! -f devel/setup.bash ]; do sleep 1; done &&
        source devel/setup.bash &&
        echo 'Starting RViz...' &&
        if [ '${ROS_VERSION:-ros1}' = 'ros1' ]; then
          export LIBGL_ALWAYS_SOFTWARE=1 &&
          export XDG_RUNTIME_DIR=/tmp/runtime-root &&
          export QT_QPA_PLATFORM=xcb &&
          export QT_X11_NO_MITSHM=1 &&
          export MESA_GL_VERSION_OVERRIDE=3.3 &&
          export MESA_GLSL_VERSION_OVERRIDE=330 &&
          export __GL_THREADED_OPTIMIZATIONS=0 &&
          echo 'Testing X11 connection...' &&
          rviz -d src/fcu_core/rviz_cfg/fcu_core.rviz
        else
          echo 'ROS2 version not available yet'
          sleep infinity
        fi
      "
